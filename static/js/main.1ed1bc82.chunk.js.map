{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","react_default","a","createElement","style","height","alert","className","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","aria-checked","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","Speakbtn","setSpeakBtn","countWords","text","wc","split","length","forEach","_useState3","_useState4","setText","Fragment","color","heading","value","onChange","event","target","backgroundColor","rows","disabled","newtext","showAlert","navigator","clipboard","writeText","join","SpeechSynthesisUtterance","window","speechSynthesis","speak","cancel","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","document","body","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.1ed1bc82.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        let lower = word.toLowerCase(word);\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n    <div style={{height:'50px'}}>\r\n        {\r\n            props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            </div>\r\n        }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" \r\n          data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" \r\n          aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link \" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link \" to=\"/about\">{props.aboutText}</Link>\r\n              </li> */}\r\n            </ul>\r\n            \r\n            {/* Now we will make more buttons in TextUtils for diff diff modes of color  */}\r\n            {/* <div className=\"d-flex\">\r\n              <div className=\"bg-primary rounded mx-2\" onClick={()=>{props.toggleMode('primary')}} style={{height:'30px',width:'30px',cursor:'pointer'}}></div>\r\n              <div className=\"bg-danger rounded mx-2\" onClick={()=>{props.toggleMode('danger')}} style={{height:'30px',width:'30px',cursor:'pointer'}}></div>\r\n              <div className=\"bg-success rounded mx-2\" onClick={()=>{props.toggleMode('success')}} style={{height:'30px',width:'30px',cursor:'pointer'}}></div>\r\n              <div className=\"bg-warning rounded mx-2\" onClick={()=>{props.toggleMode('warning')}} style={{height:'30px',width:'30px',cursor:'pointer'}}></div>\r\n              <div className=\"bg-secondary rounded mx-2\" onClick={()=>{props.toggleMode('secondary')}} style={{height:'30px',width:'30px',cursor:'pointer'}}></div>\r\n              <div className=\"bg-info rounded mx-2\" onClick={()=>{props.toggleMode('info')}} style={{height:'30px',width:'30px',cursor:'pointer'}}></div>\r\n            </div> */}\r\n\r\n            {/* This is for only one button Enable dark mode */}\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" aria-checked=\"false\" \r\n              role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\r\n                Enable DarkMode</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n  )\r\n}\r\nNavbar.propTypes = {\r\n    title : PropTypes.string.isRequired,\r\n    aboutText : PropTypes.string.isRequired\r\n}\r\n\r\n// If prop will not pass then default props will pass\r\nNavbar.defaultProps = {\r\n    title : 'Set Title Here',\r\n    aboutText : 'About'\r\n}","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n  // function to convert in upper case characters\r\n  const handleUpClick = ()=> {\r\n    // console.log(\"Uppercase was Clicked\" + text);\r\n    let newtext = text.toUpperCase();\r\n    setText(newtext);\r\n    props.showAlert(\"Converted to upper case!\",\"success\")\r\n  }\r\n\r\n  // function to convert in lower case characters\r\n  const handleLoClick = ()=> {\r\n    // console.log(\"Lowercase was Clicked\" + text);\r\n    let newtext = text.toLowerCase();\r\n    setText(newtext);\r\n    props.showAlert(\"Converted to lower case!\",\"success\")\r\n  }\r\n\r\n  // function to clear the text\r\n  const handleClearClick = ()=> {\r\n    // console.log(\"Clear text\" + text);\r\n    let newtext = \"\";\r\n    setText(newtext);\r\n    props.showAlert(\"Text cleared!\",\"success\")\r\n  }\r\n\r\n  // use state for changing speak button state\r\n  const [Speakbtn, setSpeakBtn] = useState('Speak')\r\n  // function to speak the text\r\n  const speakText = () => {\r\n      let msg = new SpeechSynthesisUtterance(text);\r\n      window.speechSynthesis.speak(msg);\r\n      if (Speakbtn === \"Speak\") {\r\n        setSpeakBtn('Stop')\r\n        props.showAlert(\"Start speaking the text!\",\"success\")\r\n      }\r\n      else {\r\n          window.speechSynthesis.cancel()\r\n          setSpeakBtn('Speak')\r\n          props.showAlert(\"Stop speaking the text!\",\"success\")\r\n      }\r\n    }\r\n\r\n    // function to copy text\r\n    const handleCopy = ()=>{\r\n      // var text = document.getElementById('myBox');\r\n      // text.select();\r\n      // navigator.clipboard.writeText(text.value);\r\n      // document.getSelection.removalAllRanges(); // used to deselect the text after copied\r\n\r\n      //directly text can be used instead of making var text and then select all \r\n      //because text is itself is whole text\r\n      navigator.clipboard.writeText(text);\r\n      props.showAlert(\"Copied to Clipboard!\",\"success\")\r\n    }\r\n\r\n    //function to remove extra space in text\r\n    const handleExtraSpace = ()=> {\r\n      let newtext = text.split(/[ ]+/);\r\n      setText(newtext.join(\" \"))\r\n      props.showAlert(\"Extra space removed!\",\"success\")\r\n    }\r\n\r\n  const handleOnChange = (event)=> {\r\n    // console.log(\"On Change\");\r\n    setText(event.target.value);\r\n  }\r\n\r\n  // function to remove the count of empty string\r\n  function countWords(text){\r\n    // /\\s+/ -> use regular expression \\s include by space including new line\r\n    let wc = text.split(/\\s+/).length;\r\n    text.split(/\\s+/).forEach((word) => {\r\n        if(!word.length){\r\n            wc -= 1;  \r\n        }\r\n    });\r\n    return wc;\r\n  }\r\n\r\n  const [text, setText] = useState(''); // default value of text is \"\"\r\n  // text=\"New Text\"; Wrong way to change the state\r\n  // setText(\"New Text\"); correct way to change the state\r\n  return (\r\n    <>\r\n     <div className=\"Container\" style={{color : props.mode==='dark'?'white':'#042743'}}>\r\n        <h1 className='mb-4'>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange}   \r\n            style={{backgroundColor : props.mode==='dark'?'#13466e':'white' , \r\n            color : props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\" >\r\n            </textarea>\r\n        </div>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleClearClick}>Clear Text</button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy}>Copy Text</button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleExtraSpace}>Remove Extra Space</button>\r\n        <button disabled={text.length===0} type=\"submit\" onClick={speakText} className=\"btn btn-primary mx-1\">{Speakbtn}</button>\r\n     </div>\r\n     <div className=\"container my-3 \" style={{color : props.mode==='dark'?'white':'#042743'}}>\r\n       <h2>Your text summary</h2>\r\n       {/* remove extra space string by filter function also that return true or false my-1 */}\r\n       {/* (text.split(/\\s+/).filter((element)=>{return element.length!==0}).length) */}\r\n       <p>{countWords(text)} words and {text.length} characters</p>\r\n       <p>{0.008 * countWords(text)} minutes to read</p>\r\n       <h2>Preview</h2>\r\n       <p>{text.length>0 ? text : \"Nothing to preview!\"}</p>\r\n     </div>\r\n    </>\r\n  )\r\n}\r\n","import React,{useState} from 'react';\nimport './App.css';\nimport Alert from './components/Alert';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light') // whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message,type)=> {\n    setAlert({\n      msg : message,\n      type : type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1000);\n  }\n\n  // This is for multiple button\n  // const removeBodyClasses=()=>{\n  //   document.body.classList.remove('bg-secondary')\n  //   document.body.classList.remove('bg-info')\n  //   document.body.classList.remove('bg-warning')\n  //   document.body.classList.remove('bg-danger')\n  //   document.body.classList.remove('bg-success')\n  //   document.body.classList.remove('bg-primary')\n  // }\n  // const toggleMode = (cls)=> {\n  //   removeBodyClasses();\n  //   document.body.classList.add('bg-'+cls)\n  //   setMode('dark')\n  // }\n\n  // This is for only one button enable dark mode\n  const toggleMode = ()=> {\n    if(mode === 'light')\n    {\n      setMode('dark')\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\",\"success\")\n      // document.title = \"TextUtils - Dark Mode\";\n    }\n    else{\n      setMode('light')\n      document.body.style.backgroundColor = 'white'\n      showAlert(\"Light mode has been enabled\",\"success\")\n      // document.title = \"TextUtils - Light Mode\"\n    }\n  }\n\n  return (\n    <>\n      {/* <Navbar title = \"TextUtils\" aboutText = \"About TextUtils\" /> */}\n      {/*React.StrictMode so that any wrong text can't be accepted */}\n      {/* <React.StrictMode>\n      <Router> */}\n        <Navbar title = \"TextUtils\" mode={mode} toggleMode={toggleMode}/>    \n        <Alert alert={alert}/>                   \n        <div className=\"container my-3\">\n          {/* <Routes>\n            <Route exact path=\"/about\" element={<About mode={mode} />} />\n            <Route exact path=\"/\" element={<TextForm showAlert={showAlert} \n                   heading = \"Try TextUtils - Word Counter, Character Counter, Remove Extra Spaces\" mode={mode} />} />\n          </Routes> */}\n          <TextForm showAlert={showAlert} heading = \"Enter The Text to analyze below\" mode={mode} />\n          {/* <About/> */}\n        </div>\n       {/* </Router>\n      /React.StrictMode>  */}\n    </>\n  );\n}\n// This is for continuous changing the title\n// setInterval(() => {\n// document.title = \"TextUtils is Amazing Mode\";\n// }, 2000);\n// setInterval(() => {\n// document.title = \"Install TextUtils Now\";\n// }, 1500);\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}